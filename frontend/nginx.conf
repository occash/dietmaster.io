worker_processes auto;

error_log logs/error.log;
pid nginx.pid;
lock_file nginx.lock;
pcre_jit on;

events {
    accept_mutex on;
    accept_mutex_delay 400ms;
    multi_accept on;
    worker_connections 2048;
    use epoll;
}

http {
    charset utf-8;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    #Tornado servers
    upstream frontends {
        server 127.0.0.1:8080;
    }

    include conf/mime.types;
    default_type application/octet-stream;

    access_log logs/access.log;

    keepalive_timeout 65;
    proxy_read_timeout 200;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    gzip on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types text/plain text/css text/xml
               application/x-javascript application/xml
               application/atom+xml text/javascript;

    # Only retry if there was a communication error, not a timeout
    # on the Tornado server (to avoid propagating "queries of death"
    # to all frontends)
    proxy_next_upstream error;
    
    # Configure geo information
    geoip_country geo/GeoIP.dat;
    geoip_city geo/GeoLiteCity.dat;
   
    server {
        listen 80;
        listen 443 default ssl;
        server_name dietmaster.io;
        keepalive_timeout 70;
        ssl_certificate /etc/sslmate/dietmaster.io.crt;
        ssl_certificate_key /etc/sslmate/dietmaster.io.key;
        root web/;
        
        error_page 404 /404.html;
        location = /404.html {
                internal;
        }

        error_page 500 502 503 504 /500.html;
        location = /500.html {
                internal;
        }
        
        if ($scheme = http) {
            return 301 https://$server_name$request_uri;
        }

        location ~* \.(css|js|map|jpg|png|ico|svg|ttf|woff|woff2)$ {
            expires 30d;
        }

        location / {
            proxy_pass_header Server;
            proxy_pass http://frontends;
            proxy_redirect off;
            
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Country $geoip_city_country_code;
            proxy_set_header X-Region $geoip_region;
            proxy_set_header X-City $geoip_city;
            proxy_set_header X-Latitude $geoip_latitude;
            proxy_set_header X-Longitude $geoip_longitude;
        }
    }
}